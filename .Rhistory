library(dplyr)
library(lubridate)
# Converta a data de nascimento em idade
rio_de_janeiro$dtNascimento <- as.Date(rio_de_janeiro$dtNascimento, format="%d/%m/%Y") # ajuste o formato conforme necessário
rio_de_janeiro$Idade <- as.integer(difftime(Sys.Date(), rio_de_janeiro$dtNascimento, units = "weeks")/52.25)
# Ajuste a condição para calcular AgravoIdade apenas quando a idade está disponível
rio_de_janeiro$AgravoIdade <- ifelse(!is.na(rio_de_janeiro$Idade) & rio_de_janeiro$Idade >= 18 & rio_de_janeiro$Idade <= 25, 1.25, 1)
# Crie novas variáveis para representar os agravos e descontos
rio_de_janeiro$AgravoSexo <- ifelse(rio_de_janeiro$sexo == 'M', 1.1, 1) # 10% de agravo para o sexo masculino
# Verifique se dtNascimento está vazia e aplique o agravamento, se necessário
rio_de_janeiro$AgravoNascimento <- ifelse(is.na(rio_de_janeiro$dtNascimento), 1.25, 1)
# Crie uma nova variável para representar os agravos e descontos com base no CEP
rio_de_janeiro$AgravoCEP <- 1 # inicialize com 1 (sem agravamento ou desconto)
# Aplique o agravamento ou desconto com base no CEP
rio_de_janeiro$AgravoCEP <- ifelse(rio_de_janeiro$cepPernoite >= "20210-005" & rio_de_janeiro$cepPernoite <= "21949-900", 1.1, rio_de_janeiro$AgravoCEP) # 10% de agravo para a Zona Norte
rio_de_janeiro$AgravoCEP <- ifelse(rio_de_janeiro$cepPernoite >= "22611-030" & rio_de_janeiro$cepPernoite <= "22795-901", 0.9, rio_de_janeiro$AgravoCEP) # 10% de desconto para a Barra da Tijuca
rio_de_janeiro$AgravoCEP <- ifelse(rio_de_janeiro$cepPernoite >= "22010-000" & rio_de_janeiro$cepPernoite <= "22610-001", 0.85, rio_de_janeiro$AgravoCEP) # 15% de desconto para a Zona Sul
# Crie uma nova variável para representar o agravo
rio_de_janeiro$AgravoSinistros <- ifelse(rio_de_janeiro$nrSinistros > 0, 1.1, 1) # 10% de agravo quando nrSinistros é maior que 0
# Crie uma nova variável para representar o desconto
rio_de_janeiro$DescontoBonus <- ifelse(rio_de_janeiro$nrBonusAtual > 0, 1 - rio_de_janeiro$nrBonusAtual/100, 1) # Desconto correspondente ao valor de nrBonusAtual
# Agora você pode usar as variáveis AgravoSinistros e DescontoBonus em seus cálculos de prêmio
rio_de_janeiro$Premio <- round(0.066 * rio_de_janeiro$lmiCasco * rio_de_janeiro$AgravoSexo * rio_de_janeiro$AgravoIdade * rio_de_janeiro$AgravoNascimento * rio_de_janeiro$AgravoCEP * rio_de_janeiro$AgravoSinistros * rio_de_janeiro$DescontoBonus, 2)
# Ajuste o modelo GLM
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro, family = gaussian())
# Carregue a biblioteca necessária
library(dplyr)
library(lubridate)
# Converta a data de nascimento em idade
rio_de_janeiro$dtNascimento <- as.Date(rio_de_janeiro$dtNascimento, format="%d/%m/%Y") # ajuste o formato conforme necessário
rio_de_janeiro$Idade <- as.integer(difftime(Sys.Date(), rio_de_janeiro$dtNascimento, units = "weeks")/52.25)
# Ajuste a condição para calcular AgravoIdade apenas quando a idade está disponível
rio_de_janeiro$AgravoIdade <- ifelse(!is.na(rio_de_janeiro$Idade) & rio_de_janeiro$Idade >= 18 & rio_de_janeiro$Idade <= 25, 1.25, 1)
# Crie novas variáveis para representar os agravos e descontos
rio_de_janeiro$AgravoSexo <- ifelse(rio_de_janeiro$sexo == 'M', 1.1, 1) # 10% de agravo para o sexo masculino
# Verifique se dtNascimento está vazia e aplique o agravamento, se necessário
rio_de_janeiro$AgravoNascimento <- ifelse(is.na(rio_de_janeiro$dtNascimento), 1.25, 1)
# Crie uma nova variável para representar os agravos e descontos com base no CEP
rio_de_janeiro$AgravoCEP <- 1 # inicialize com 1 (sem agravamento ou desconto)
# Aplique o agravamento ou desconto com base no CEP
rio_de_janeiro$AgravoCEP <- ifelse(rio_de_janeiro$cepPernoite >= "20210-005" & rio_de_janeiro$cepPernoite <= "21949-900", 1.1, rio_de_janeiro$AgravoCEP) # 10% de agravo para a Zona Norte
rio_de_janeiro$AgravoCEP <- ifelse(rio_de_janeiro$cepPernoite >= "22611-030" & rio_de_janeiro$cepPernoite <= "22795-901", 0.9, rio_de_janeiro$AgravoCEP) # 10% de desconto para a Barra da Tijuca
rio_de_janeiro$AgravoCEP <- ifelse(rio_de_janeiro$cepPernoite >= "22010-000" & rio_de_janeiro$cepPernoite <= "22610-001", 0.85, rio_de_janeiro$AgravoCEP) # 15% de desconto para a Zona Sul
# Crie uma nova variável para representar o agravo
rio_de_janeiro$AgravoSinistros <- ifelse(rio_de_janeiro$nrSinistros > 0, 1.1, 1) # 10% de agravo quando nrSinistros é maior que 0
# Crie uma nova variável para representar o desconto
rio_de_janeiro$DescontoBonus <- ifelse(rio_de_janeiro$nrBonusAtual > 0, 1 - rio_de_janeiro$nrBonusAtual/100, 1) # Desconto correspondente ao valor de nrBonusAtual
# Agora você pode usar as variáveis AgravoSinistros e DescontoBonus em seus cálculos de prêmio
rio_de_janeiro$Premio <- round(0.066 * rio_de_janeiro$lmiCasco * rio_de_janeiro$AgravoSexo * rio_de_janeiro$AgravoIdade * rio_de_janeiro$AgravoNascimento * rio_de_janeiro$AgravoCEP * rio_de_janeiro$AgravoSinistros * rio_de_janeiro$DescontoBonus, 2)
# Ajuste o modelo GLM
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro, family = gaussian())
View(rio_de_janeiro)
load("~/TCC/.RData")
View(tratar_dados)
View(dados_selecionados)
View(rio_de_janeiro)
View(dados_selecionados)
View(dados_selecionados)
View(rio_de_janeiro)
View(dados_selecionados)
View(rio_de_janeiro)
View(dados_selecionados)
View(rio_de_janeiro)
View(res.pca)
View(modelo)
View(df)
View(dados_selecionados)
View(rio_de_janeiro)
View(tratar_dados)
View(rio_de_janeiro)
View(modelo)
View(modelo)
View(rio_de_janeiro)
rio_de_janeiro <- subset(rio_de_janeiro, select = -cdFranquia)
rio_de_janeiro <- subset(rio_de_janeiro, select = -premio)
rio_de_janeiro <- subset(rio_de_janeiro, select = -Premio)
# Ajuste o modelo GLM
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro, family = gaussian())
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro, family = gaussian())
rio_de_janeiro$Premio <- predict(modelo, newdata = rio_de_janeiro)
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro, family = gaussian())
rio_de_janeiro$Premio <- round(rio_de_janeiro$Premio, 2)
View(rio_de_janeiro)
# Carregar a biblioteca necessária
library(FactoMineR)
library(factoextra)
# Realizar a PCA
res.pca <- PCA(rio_de_janeiro[,c('lmiCasco', 'AgravoIdade', 'AgravoSexo', 'AgravoNascimento', 'AgravoCEP', 'AgravoSinistros', 'DescontoBonus')], graph = FALSE)
# Visualizar as contribuições das variáveis para o primeiro componente principal
fviz_contrib(res.pca, choice = "var", axes = 1, top = 10)
# Carregar a biblioteca necessária
library(FactoMineR)
library(factoextra)
# Realizar a PCA
res.pca <- PCA(rio_de_janeiro[,c('lmiCasco', 'AgravoIdade', 'AgravoSexo', 'AgravoNascimento', 'AgravoCEP', 'AgravoSinistros', 'DescontoBonus')], graph = FALSE)
# Visualizar as contribuições das variáveis para o primeiro componente principal
fviz_contrib(res.pca, choice = "var", axes = 1, top = 10)
# Primeiro, instale e carregue a biblioteca ggplot2 se ainda não o fez
# install.packages("ggplot2")
library(ggplot2)
# Em seguida, obtenha os coeficientes do modelo
coeficientes <- coef(summary(modelo))
# Crie um data frame com os coeficientes e seus nomes
df <- data.frame(
Coeficiente = coeficientes[, "Estimate"],
Variavel = rownames(coeficientes)
)
# Crie o gráfico de coeficientes
ggplot(df, aes(x = reorder(Variavel, Coeficiente), y = Coeficiente)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Gráfico de Coeficientes", x = "Variável", y = "Coeficiente")
# Primeiro, instale e carregue a biblioteca ggplot2 se ainda não o fez
# install.packages("ggplot2")
library(ggplot2)
# Crie um data frame com os dados
dados <- data.frame(
Variavel = c('lmiCasco', 'AgravoIdade', 'AgravoSexo', 'AgravoNascimento', 'AgravoCEP', 'AgravoSinistros', 'DescontoBonus'),
Dim1 = c(439.415.840, 28.820.626, 25.349.197, 22.979.569, 275.521.912, 0.4611463, 203.301.393),
# Primeiro, instale e carregue a biblioteca ggplot2 se ainda não o fez
# install.packages("ggplot2")
library(ggplot2)
# Crie um data frame com os dados
dados <- data.frame(
Variavel = c('lmiCasco', 'AgravoIdade', 'AgravoSexo', 'AgravoNascimento', 'AgravoCEP', 'AgravoSinistros', 'DescontoBonus'),
Dim1 = c(439415840, 28820626, 25349197, 22979569, 275521912, 461146.3, 203301393),
Dim2 = c(11860954, 115943.7, 371134158, 309375942, 210987854, 31351864, 64129791),
Dim3 = c(65768381, 630159956, 48008424, 47573581, 28980044, 945319.8, 170056416),
Dim4 = c(495222.3, 13770848, 397572.3, 11165169, 15355738, 943534665, 724563.4),
Dim5 = c(237192507, 263655.79, 4175391806, 5341598013, 134733963, 17877.57, 829303.75)
)
# Transforme os dados para o formato longo
dados_long <- reshape2::melt(dados, id.vars = "Variavel")
# Crie o gráfico de barras empilhadas
ggplot(dados_long, aes(x = Variavel, y = value, fill = variable)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Contribuição de cada variável para cada dimensão", x = "Variável", y = "Contribuição") +
theme_minimal()
# Ajuste as marcas de escala no eixo x para exibir os números em formato legível
ggplot(dados_long, aes(x = Variavel, y = value, fill = variable)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_y_continuous(labels = scales::comma) +  # Adicione esta linha
labs(title = "Contribuição de cada variável para cada dimensão", x = "Variável", y = "Contribuição") +
theme_minimal()
# Instale e carregue os pacotes necessários
install.packages(c("FactoMineR", "factoextra"))
library(FactoMineR)
library(factoextra)
# Suponha que 'dados' seja seu dataframe e as variáveis estejam nas colunas 2 a 6
dados <- data.frame(
Variavel = c("lmiCasco", "AgravoIdade", "AgravoSexo", "AgravoNascimento", "AgravoCEP", "AgravoSinistros", "DescontoBonus"),
Dim.1 = c(439.415.840, 28.820.626, 25.349.197, 22.979.569, 275.521.912, 0.4611463, 203.301.393),
# Instale e carregue os pacotes necessários
install.packages(c("FactoMineR", "factoextra"))
library(FactoMineR)
library(factoextra)
# Suponha que 'dados' seja seu dataframe e as variáveis estejam nas colunas 2 a 6
dados <- data.frame(
Variavel = c("lmiCasco", "AgravoIdade", "AgravoSexo", "AgravoNascimento", "AgravoCEP", "AgravoSinistros", "DescontoBonus"),
Dim.1 = c(439.415.840, 28.820.626, 25.349.197, 22.979.569, 275.521.912, 0.4611463, 203.301.393),
# Instale e carregue os pacotes necessários
install.packages(c("FactoMineR", "factoextra"))
library(FactoMineR)
library(factoextra)
# Suponha que 'dados' seja seu dataframe e as variáveis estejam nas colunas 2 a 6
dados <- data.frame(
Variavel = c("lmiCasco", "AgravoIdade", "AgravoSexo", "AgravoNascimento", "AgravoCEP", "AgravoSinistros", "DescontoBonus"),
Dim.1 = c(439.415840, 28.820626, 25.349197, 22.979569, 275.521912, 0.4611463, 203.301393),
Dim.2 = c(11.860954, 0.1159437, 371.134158, 309.375942, 210.987854, 31.351864, 64.129791),
Dim.3 = c(65.768381, 630.159956, 48.008424, 47.573581, 28.980044, 0.9453198, 170.056416),
Dim.4 = c(0.4952223, 13.770848, 0.3975723, 11.165169, 15.355738, 943.534665, 0.7245634),
Dim.5 = c(237.192507, 0.26365579, 4.175391806, 5.341598013, 134.733963, 0.01787757, 0.82930375)
)
# Realize a análise de componentes principais
res.pca <- PCA(dados[,2:6], scale.unit=TRUE, ncp=5, graph=FALSE)
# Crie o gráfico
fviz_pca_var(res.pca, col.var="contrib", gradient.cols=c("#00AFBB", "#E7B800", "#FC4E07"), repel=TRUE)
View(dados)
View(contribuicoes)
View(df)
View(df)
View(df)
# Instale e carregue os pacotes necessários
install.packages("ggplot2")
library(ggplot2)
# Suponha que 'rio_de_janeiro' seja seu dataframe e as variáveis estejam nas colunas 2 a 6
# Transforme os dados para o formato longo
dados_long <- reshape2::melt(rio_de_janeiro, id.vars = "Variavel")
# Realize a PCA
pca_resultado <- prcomp(rio_de_janeiro, scale = TRUE)
# Verifique se todas as colunas são numéricas
sapply(rio_de_janeiro, is.numeric)
# Primeiro, vamos criar um dataframe com os seus dados
dados <- data.frame(
Variavel = c("lmiCasco", "AgravoIdade", "AgravoSexo", "AgravoNascimento", "AgravoCEP", "AgravoSinistros", "DescontoBonus"),
Dim1 = c(439415840, 28820626, 25349197, 22979569, 275521912, 4611463, 203301393),
Dim2 = c(11860954, 1159437, 371134158, 309375942, 210987854, 31351864, 64129791),
Dim3 = c(65768381, 630159956, 48008424, 47573581, 28980044, 9453198, 170056416),
Dim4 = c(0.4952223, 13.770848, 0.3975723, 11.165169, 15.355738, 943534665, 0.7245634),
Dim5 = c(237192507, 0.26365579, 4175391806, 5341598013, 134733963, 0.01787757, 0.82930375)
)
# Agora, vamos transformar os dados para o formato longo
dados_long <- tidyr::pivot_longer(dados, -Variavel, names_to = "Dimensao", values_to = "Valor")
# Finalmente, vamos criar o gráfico de barras
ggplot2::ggplot(dados_long, ggplot2::aes(x = Variavel, y = Valor, fill = Dimensao)) +
ggplot2::geom_bar(stat = "identity", position = "dodge") +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)) +
ggplot2::labs(x = "Variável", y = "Valor", fill = "Dimensão", title = "Contribuição de cada variável para cada dimensão")
ggplot2::ggplot(dados_long, ggplot2::aes(x = Variavel, y = Valor, fill = Dimensao)) +
ggplot2::geom_bar(stat = "identity", position = "dodge") +
ggplot2::scale_y_log10() +  # Adiciona escala logarítmica ao eixo y
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)) +
ggplot2::labs(x = "Variável", y = "Valor (escala logarítmica)", fill = "Dimensão", title = "Contribuição de cada variável para cada dimensão")
# Carregar os dados
# dados <- read.csv("rio_de_janeiro.csv")
# Ajustar o modelo de regressão linear
modelo <- lm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = dados)
View(dados)
View(dados_selecionados)
View(modelo)
View(modelo)
View(modelo)
View(dados)
> rio_de_janeiro <- lm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = dados)
# Ajustar o modelo de regressão linear
modelo <- lm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro)
# Ver os resultados
summary(modelo)
View(rio_de_janeiro)
View(tratar_dados)
# Carregar os dados
# dados <- read.csv("caminho_para_seu_arquivo.csv")
# Ajustar o modelo de regressão linear
modelo <- lm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = dados)
# Ajustar o modelo de regressão linear
modelo <- lm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro)
# Ver os resultados
summary(modelo)
# Defina a opção scipen para um número grande para evitar a notação científica
options(scipen = 999)
# Ajuste o modelo
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, family = gaussian(), data = rio_de_janeiro)
# Exiba o resumo do modelo
summary(modelo)
# Centralize as variáveis independentes
rio_de_janeiro$lmiCasco_centralizado <- rio_de_janeiro$lmiCasco - mean(rio_de_janeiro$lmiCasco)
rio_de_janeiro$AgravoIdade_centralizado <- rio_de_janeiro$AgravoIdade - mean(rio_de_janeiro$AgravoIdade)
rio_de_janeiro$AgravoSexo_centralizado <- rio_de_janeiro$AgravoSexo - mean(rio_de_janeiro$AgravoSexo)
rio_de_janeiro$AgravoNascimento_centralizado <- rio_de_janeiro$AgravoNascimento - mean(rio_de_janeiro$AgravoNascimento)
rio_de_janeiro$AgravoCEP_centralizado <- rio_de_janeiro$AgravoCEP - mean(rio_de_janeiro$AgravoCEP)
rio_de_janeiro$AgravoSinistros_centralizado <- rio_de_janeiro$AgravoSinistros - mean(rio_de_janeiro$AgravoSinistros)
rio_de_janeiro$DescontoBonus_centralizado <- rio_de_janeiro$DescontoBonus - mean(rio_de_janeiro$DescontoBonus)
# Ajuste o modelo com as variáveis centralizadas
modelo <- lm(Premio ~ lmiCasco_centralizado + AgravoIdade_centralizado + AgravoSexo_centralizado + AgravoNascimento_centralizado + AgravoCEP_centralizado + AgravoSinistros_centralizado + DescontoBonus_centralizado, data = rio_de_janeiro)
# Exiba o resumo do modelo
summary(modelo)
summary (modelosummary (modelo)
par(mfrow=c(2,2))
par(mfrow=c(2,2))
plot(modelo)
dev.off() # Desliga o dispositivo gráfico atual
par(mfrow=c(2,2))
plot(modelo)
par(mfrow=c(1,1))
plot(modelo)
autoplot (modelo)
install.packages("performance")
library(performance)
check_model(seu_modelo)
install.packages("performance")
library(performance)
check_model(modelo)
autoplot (modelo)
autoplot (modelo)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggfortify")
library(ggfortify)
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro, family = gaussian())
autoplot(modelo)
# Carregar a biblioteca necessária
library(ggplot2)
# Ajustar o modelo glm ao seu dataframe
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro, family = gaussian())
# Extrair os coeficientes do modelo
coeficientes <- summary(modelo)$coefficients
# Criar um dataframe com os resultados
df_coeficientes <- data.frame(
Termo = row.names(coeficientes),
Estimativa = coeficientes[, "Estimate"]
)
# Ordenar os coeficientes pela estimativa
df_coeficientes <- df_coeficientes[order(df_coeficientes$Estimativa), ]
# Criar o gráfico de barras
ggplot(df_coeficientes, aes(x = Termo, y = Estimativa, fill = Termo)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Gráfico de Coeficientes",
x = "Termos do Modelo",
y = "Estimativa dos Coeficientes") +
coord_flip() # Inverter os eixos para melhor visualização
# Carregar a biblioteca necessária
library(ggplot2)
# Ajustar o modelo glm ao seu dataframe
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro, family = gaussian())
# Extrair os coeficientes do modelo
coeficientes <- summary(modelo)$coefficients
# Criar um dataframe com os resultados
df_coeficientes <- data.frame(
Termo = row.names(coeficientes),
Estimativa = coeficientes[, "Estimate"]
)
# Ordenar os coeficientes pela estimativa
df_coeficientes <- df_coeficientes[order(df_coeficientes$Estimativa), ]
# Criar o gráfico de barras
ggplot(df_coeficientes, aes(x = Termo, y = Estimativa, fill = Termo)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Gráfico de Coeficientes",
x = "Termos do Modelo",
y = "Estimativa dos Coeficientes") +
coord_flip() # Inverter os eixos para melhor visualização
modelo_glm <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo +
AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus,
data = rio_de_janeiro, family = gaussian(link = "log"))
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo +
AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus,
data = rio_de_janeiro, family = gaussian(link = "log"))
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo +
AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus,
data = rio_de_janeiro, family = gaussian(link = "log"))
# Fornecendo valores iniciais para os parâmetros do modelo
valores_iniciais <- c(Intercept = 1, lmiCasco = 1, AgravoIdade = 1,
AgravoSexo = 1, AgravoNascimento = 1, AgravoCEP = 1,
AgravoSinistros = 1, DescontoBonus = 1)
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo +
AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus,
data = rio_de_janeiro, family = gaussian(link = "log"), start = valores_iniciais)
# Adicionando uma pequena constante para evitar o logaritmo de zero
rio_de_janeiro$Premio <- rio_de_janeiro$Premio + 1
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo +
AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus,
data = rio_de_janeiro, family = gaussian(link = "log"))
# Carregar a biblioteca necessária
library(ggplot2)
# Ajustar o modelo glm ao seu dataframe
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro, family = gaussian())
# Extrair os coeficientes do modelo
coeficientes <- summary(modelo)$coefficients
# Criar um dataframe com os resultados
df_coeficientes <- data.frame(
Termo = row.names(coeficientes),
Estimativa = coeficientes[, "Estimate"]
)
# Ordenar os coeficientes pela estimativa
df_coeficientes <- df_coeficientes[order(df_coeficientes$Estimativa), ]
# Criar o gráfico de barras
ggplot(df_coeficientes, aes(x = Termo, y = Estimativa, fill = Termo)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Gráfico de Coeficientes",
x = "Termos do Modelo",
y = "Estimativa dos Coeficientes") +
coord_flip() # Inverter os eixos para melhor visualização
summary (modelo)
glm (formula = Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, family = gaussian(), data = rio_de_janeiro)
formula
offset_term <- rep(log(1), nrow(rio_de_janeiro))  # Substitua '1' pelo valor desejado
modelo <- glm(Premio ~ offset(offset_term) + lmiCasco + AgravoIdade + AgravoSexo +
AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus,
data = rio_de_janeiro, family = gaussian(link = "log"))
summary (modelo)
# Carregar a biblioteca necessária
library(ggplot2)
# Ajustar o modelo glm ao seu dataframe
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro, family = gaussian())
# Extrair os coeficientes do modelo
coeficientes <- summary(modelo)$coefficients
# Criar um dataframe com os resultados
df_coeficientes <- data.frame(
Termo = row.names(coeficientes),
Estimativa = coeficientes[, "Estimate"]
)
# Ordenar os coeficientes pela estimativa
df_coeficientes <- df_coeficientes[order(df_coeficientes$Estimativa), ]
# Criar o gráfico de barras
ggplot(df_coeficientes, aes(x = Termo, y = Estimativa, fill = Termo)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Gráfico de Coeficientes",
x = "Termos do Modelo",
y = "Estimativa dos Coeficientes") +
coord_flip() # Inverter os eixos para melhor visualização
summary (modelo)
offset_term <- rep(log(1), nrow(rio_de_janeiro))  # Substitua '1' pelo valor desejado
modelo <- glm(Premio ~ offset(offset_term) + lmiCasco + AgravoIdade + AgravoSexo +
AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus,
data = rio_de_janeiro, family = gaussian(link = "log"))
summary (modelo)
modelo <- glm(Premio ~ offset(offset_term) + lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro, family = gaussian(link = "log"))
summary (modelo)
# Carregar o pacote ggplot2
library(ggplot2)
# Supondo que 'modelo' seja o seu modelo GLM
coeficientes <- coef(summary(modelo))
# Criar um data frame com os coeficientes e seus nomes
df_coeficientes <- data.frame(
Termo = rownames(coeficientes),
Estimativa = coeficientes[, "Estimate"]
)
# Criar o gráfico de barras
ggplot(df_coeficientes, aes(x = Termo, y = Estimativa, fill = Termo)) +
geom_bar(stat = "identity") +
coord_flip() +  # Inverter os eixos para ter barras horizontais
theme_minimal() +  # Tema minimalista
labs(x = "Termos", y = "Estimativas", title = "Gráfico de Coeficientes")
summary (modelo)
# Definir uma penalidade alta para evitar a notação científica
options(scipen=999)
# Agora, ao exibir o resumo do modelo, os números serão mostrados integralmente
summary(modelo)
# Arredondar a variável lmiCasco para 2 casas decimais
rio_de_janeiro$lmiCasco <- round(rio_de_janeiro$lmiCasco, digits = 2)
# Aumentar para 2 casas decimais sem arredondar
rio_de_janeiro$lmiCasco <- format(rio_de_janeiro$lmiCasco, nsmall = 2)
# Excluir observações onde lmiCasco é igual a zero
rio_de_janeiro <- rio_de_janeiro[rio_de_janeiro$lmiCasco != 0, ]
# Excluir observações onde lmiCasco é igual a zero
rio_de_janeiro <- rio_de_janeiro[rio_de_janeiro$lmiCasco != 0.00, ]
View(rio_de_janeiro)
# Carregar o pacote dplyr
library(dplyr)
# Remover linhas onde o valor de lmiCasco é 0.00
rio_de_janeiro <- rio_de_janeiro %>% filter(lmiCasco != 0.00)
# Carregar o pacote dplyr
library(dplyr)
# Remover linhas onde o valor de lmiCasco é 0.00
rio_de_janeiro <- rio_de_janeiro %>% filter(lmiCasco != 0.00)
View(rio_de_janeiro)
View(rio_de_janeiro)
# Carregar o pacote dplyr
library(dplyr)
# Remover linhas onde o valor de lmiCasco é 0.00
rio_de_janeiro <- rio_de_janeiro %>% filter(lmiCasco != 0.00)
# Carregar o pacote dplyr
library(dplyr)
# Remover linhas onde o valor de lmiCasco é igual a 0 ou 0.00
rio_de_janeiro <- rio_de_janeiro %>% filter(lmiCasco != 0 & lmiCasco != "0.00")
summary (modelo)
glm(formula = Premio ~ offset(offset_term) + lmiCasco + AgravoIdade +
AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros +
DescontoBonus, family = Gamma(link = "log"), data = rio_de_janeiro)
summary (modelo)
offset_term <- rep(log(1), nrow(rio_de_janeiro))
modelo <- glm(Premio ~ offset(offset_term) + lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro, family = gaussian(link = "log"))
summary (modelo)
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro, family = gaussian())
rio_de_janeiro <- subset(rio_de_janeiro, lmiCasco != 0)
summary (modelo)
rio_de_janeiro <- subset(rio_de_janeiro, select = -c(cdClausulaReparoRapido, cdClausulaMartelinho, cdClausula_cisticercose_DiaNoite, cdClausula0Km, tpCliente, pctDesconto, lmiDc, lmiDm, lmiDmo, lmiBlindagem, flSeguradoEoCondutor))
rio_de_janeiro <- subset(rio_de_janeiro, select = -c(cdClausulaReparoRapido, cdClausulaMartelinho, cdClausulaCarroReserva, cdClausulaDiaNoite, cdClausula0Km, tpCliente, pctDesconto, lmiDc, lmiDm, lmiDmo, lmiBlindagem, flSeguradoEoCondutor))
rio_de_janeiro <- subset(rio_de_janeiro, select = -c(cdFranquia, cdUsoVeiculo))
rio_de_janeiro <- subset(rio_de_janeiro, select = -c(garagemLocalEstudo, garagemLocalTrabalho))
rio_de_janeiro <- subset(rio_de_janeiro, select = -c( lmiAppMorte, lmiAppInvalidez, cdCalusulaVidros, ))
rio_de_janeiro <- subset(rio_de_janeiro, select = -c( lmiAppMorte, lmiAppInvalidez, cdCalusulaVidros ))
rio_de_janeiro <- subset(rio_de_janeiro, select = -c( lmiAppMorte, lmiAppInvalidez, cdClausulaVidros ))
rio_de_janeiro <- subset(rio_de_janeiro, select = -c( kmMediaMensal, CondutorEntre18e25 ))
rio_de_janeiro <- subset(rio_de_janeiro, select = -c( kmMediaMensal, condutorEntre18e25 ))
sumarry (modelo)
summary (modelo)
modelo <- glm(Premio ~ lmiCasco * AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro, family = gaussian())
summary (modelo)
rio_de_janeiro$lmiCasco_log <- log(rio_de_janeiro$lmiCasco)
modelo <- glm(Premio ~ lmiCasco_log + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro, family = gaussian())
summary (modelo)
View(rio_de_janeiro)
View(rio_de_janeiro)
rio_de_janeiro$cdUsoVeiculo <- NULL
rio_de_janeiro$cdUsoVeiculo <- NULL
rio_de_janeiro$cdUsoVeiculo <- NULL
rio_de_janeiro$cdFranquia <- NULL
rio_de_janeiro$garagemLocalTrabalho <- NULL
rio_de_janeiro$garagemPernoite <- NULL
rio_de_janeiro$flSeguradoEoCondutor <- NULL
rio_de_janeiro$garagemLocalEstudo <- NULL
rio_de_janeiro$kmMediaMensal <- NULL
rio_de_janeiro$condutorEntre18e25 <- NULL
rio_de_janeiro$lmiBlindagem <- NULL
rio_de_janeiro$lmiDm <- NULL
rio_de_janeiro$lmiDc <- NULL
rio_de_janeiro$lmiDmoc <- NULL
rio_de_janeiro$lmiDmo <- NULL
rio_de_janeiro$lmiAppInvalidez <- NULL
rio_de_janeiro$lmiAppMorte <- NULL
rio_de_janeiro$pctDesconto <- NULL
rio_de_janeiro$tpCliente <- NULL
rio_de_janeiro$cdClausula0Km <- NULL
rio_de_janeiro$cdClausulaCarroReserva, cdClausulaDianoite] <- NULL
rio_de_janeiro$cdClausulaCarroReserva] <- NULL
rio_de_janeiro$cdClausulaCarroReserva] <- NULL
rio_de_janeiro$cdClausulaCarroReserva <- NULL
rio_de_janeiro$cdClausulaDianoite <- NULL
rio_de_janeiro$cdClausulaDiaNoite <- NULL
rio_de_janeiro$cdClausulaMartelinho <- NULL
rio_de_janeiro$cdClausulaReparoRapido <- NULL
rio_de_janeiro$cdClausulaVidros <- NULL
rio_de_janeiro <- subset(rio_de_janeiro, lmiCasco != 0)
modelo <- glm(Premio ~ lmiCasco + AgravoIdade + AgravoSexo + AgravoNascimento + AgravoCEP + AgravoSinistros + DescontoBonus, data = rio_de_janeiro, family = gaussian())
cov_matrix <- vcov(modelo)
View(cov_matrix)
